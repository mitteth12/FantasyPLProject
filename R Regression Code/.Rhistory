# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
#Function to get the cross validation error for a model
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 14)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
# Compute cross-validation error
model.ids <- 1:14
cv.errors <-  map(model.ids, get_model_formula, model_2021, "total_points") %>%
map(get_cv_error, data = FPL2021_minusppg) %>%
unlist()
plot(best2021_model$fitted.values, data.rstudent)
best2021_model <- lm(total_points~assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=FPL2021_minusppg)
data.resid <- resid(best2021_model)
data.stresid <- rstandard(best2021_model)
data.rstudent <- rstudent(best2021_model)
predictz <- predict(best2021_model)
predictz
plot(predictz, data.stresid)
plot(predictz, data.resid)
qqnorm(data.rstudent, pch=20)
qqline(data.rstudent, col="blue")
hist(data.rstudent) #histogram
plot(FPL2021_minusppg$assists, data.rstudent, pch=20) #residual vs. assists
library(car)
avPlots(best2021_model)
#Roberto Firmino
FPL_2021[321,]
#Predicted Firmino Points
predictz[321]
#Predicted Firmino Points
predictz[321]
NewFPL2021 <- read_csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/2020-21/players_raw.csv")
plot(best2021_model$fitted.values, data.rstudent)
plot(best2021_model$fitted.values, data.rstudent)
abline(h=0)
library(SciViews)
lmbest_model <- lm(ln(total_points) ~ assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=FPL2021_minusppg)
library(SciViews)
lmbest_model <- lm(ln(total_points) ~ assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=FPL2021_minusppg, na.rm=FALSE)
library(SciViews)
lmbest_model <- lm(ln(total_points) ~ assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=FPL2021_minusppg, na.rm=TRUE)
library(SciViews)
lmbest_model <- lm(ln(total_points) ~ assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=NewFPL2021)
View(NewFPL2021)
library(SciViews)
NewFPL2021 <- filter(NewFPL2021, total_points > 0)
lmbest_model <- lm(ln(total_points) ~ assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=NewFPL2021)
tresid1 <- rstudent(lmbest_model)
par(mfrow = c(1,2))
qqnorm(tresid1, pch=20)
qqline(tresid1, col="blue")
hist(tresid1)
plot(lmbest_model$fitted.values, tresid1, pch=20)
abline(h=0)
plot(tresid1, type="o", pch=20)
abline(h=0)
library(SciViews)
NewFPL2021 <- filter(NewFPL2021, total_points > 0)
lmbest_model <- lm(ln(total_points) ~ assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=NewFPL2021)
summary(lmbest_model)
sqrt_model <- lm(sqrt(total_points) ~ assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=NewFPL2021)
summary(sqrt_model)
tresid2 <- rstudent(sqrt_model)
par(mfrow = c(1,2))
qqnorm(tresid2, pch=20)
qqline(tresid2, col="blue")
hist(tresid2)
plot(sqrt_model$fitted.values, tresid2, pch=20)
abline(h=0)
plot(tresid2, type="o", pch=20)
abline(h=0)
train <- read.csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/FPLTrainModel.csv")
View(train)
test <- read.csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/FPLCurrentYearPredict.csv")
View(test)
library(xgboost)
dtrain <- xgb.DMatrix(data = train)
library(xgboost)
dtrain <- xgb.DMatrix(data = train, label=train$label)
library(xgboost)
train_labels <- train %>% select(name)
dtrain <- xgb.DMatrix(data = train, label=train$label)
library(xgboost)
train_labels <- train %>% select(name)
dtrain <- xgb.DMatrix(data = train, label=train_labels)
NewFPL2021 <- read_csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/2020-21/players_raw.csv")
library(dplyr)
#Load in Packages
#install.packages("leaps")
library(tidyverse)
library(caret)
library(leaps)
NewFPL2021 <- read_csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/2020-21/players_raw.csv")
plot(best2021_model$fitted.values, data.rstudent)
best2021_model <- lm(total_points~assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=FPL2021_minusppg)
library(dplyr)
#Load in Data and Packages
FPL_2021 <- read.csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/2020-21/players_raw.csv")
#Select Certain Columns to Observe and Make a Model With
FPL2021_Data <- FPL_2021 %>% select(-c(first_name, second_name, corners_and_indirect_freekicks_order,
direct_freekicks_order, dreamteam_count, ict_index_rank, id,
influence_rank, penalties_missed, penalties_order, red_cards, yellow_cards,
team_code, threat_rank, threat_rank_type, creativity_rank))
#Load in Packages
#install.packages("leaps")
library(tidyverse)
library(caret)
library(leaps)
#Get Visual of 2020-21 Season Data
sample_n(FPL2021_Data, 5)
#Make Multi Linear Regression Model Based on Variables
MLR2021_model <- lm(total_points~., data = FPL2021_Data)
summary(MLR2021_model)
#Make new dataframe without points per game and run model again
FPL2021_minusppg <- FPL2021_Data %>% select(-points_per_game)
MLR2021_revmodel <- lm(total_points~., data = FPL2021_minusppg)
summary(MLR2021_revmodel)
#Finding Best Model Using Best Subset Method
model_2021 <- regsubsets(total_points~., data = FPL2021_minusppg, nvmax=16)
summary(model_2021)
#See which model works best for adj r^2, cp, and bic
res.sum <- summary(model_2021)
data.frame(
Adj.R2 = which.max(res.sum$adjr2),
CP = which.min(res.sum$cp),
BIC = which.min(res.sum$bic)
)
#k-folds formula taken from above source
# id: model id
# object: regsubsets object
# data: data used to fit regsubsets
# outcome: outcome variable
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object)$which[id,-1]
# Get outcome variable
#form <- as.formula(object$call[[2]])
#outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
#Function to get the cross validation error for a model
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 14)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
# Compute cross-validation error
model.ids <- 1:14
cv.errors <-  map(model.ids, get_model_formula, model_2021, "total_points") %>%
map(get_cv_error, data = FPL2021_minusppg) %>%
unlist()
library(SciViews)
NewFPL2021 <- filter(NewFPL2021, total_points > 0)
lmbest_model <- lm(ln(total_points) ~ assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=NewFPL2021)
summary(lmbest_model)
lmbest2_model <- lm(ln(total_points) ~ ln(assists) + ln(bonus) + ln(bps) + ln(clean_sheets) + ln(goals_scored) + ln(influence) + ln(minutes) + ln(saves) + ln(threat), data=NewFPL2021)
NewFPL2021 <- filter(NewFPL2021, assists > 0)
NewFPL2021 <- filter(NewFPL2021, bonus > 0)
NewFPL2021 <- filter(NewFPL2021, bps > 0)
NewFPL2021 <- filter(NewFPL2021, clean_sheets > 0)
NewFPL2021 <- filter(NewFPL2021, total_points > 0)
NewFPL2021 <- filter(NewFPL2021, goals_scored > 0)
NewFPL2021 <- filter(NewFPL2021, influence > 0)
NewFPL2021 <- filter(NewFPL2021, minutes > 0)
NewFPL2021 <- filter(NewFPL2021, saves > 0)
NewFPL2021 <- filter(NewFPL2021, threat > 0)
lmbest2_model <- lm(ln(total_points) ~ ln(assists) + ln(bonus) + ln(bps) + ln(clean_sheets) + ln(goals_scored) + ln(influence) + ln(minutes) + ln(saves) + ln(threat), data=NewFPL2021)
#Load in packages
library(dplyr)
library(tidyverse)
#Load in Beginning Data
FPL_1920 <- read.csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/2019-20/players_raw.csv")
FPL_2021 <- read.csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/2020-21/players_raw.csv")
NewFPL2021 <- read_csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/2020-21/players_raw.csv")
FPL_1920 <- FPL_1920 %>% filter(total_points > 0)
FPL_1920 <- FPL_1920 %>% filter(assists > 0)
FPL_1920 <- FPL_1920 %>% filter(bonus > 0)
FPL_1920 <- FPL_1920 %>% filter(bps > 0)
FPL_1920 <- FPL_1920 %>% filter(goals_scored > 0)
FPL_1920 <- FPL_1920 %>% filter(influence > 0)
FPL_1920 <- FPL_1920 %>% filter(threat > 0)
FPL_1920 <- FPL_1920 %>% filter(minutes > 0)
NewFPL2021 <- NewFPL2021 %>% filter(total_points > 0)
NewFPL2021 <- NewFPL2021 %>% filter(assists > 0)
NewFPL2021 <- NewFPL2021 %>% filter(bonus > 0)
NewFPL2021 <- NewFPL2021 %>% filter(bps > 0)
NewFPL2021 <- NewFPL2021 %>% filter(goals_scored > 0)
NewFPL2021 <- NewFPL2021 %>% filter(influence > 0)
NewFPL2021 <- NewFPL2021 %>% filter(threat > 0)
NewFPL2021 <- NewFPL2021 %>% filter(minutes > 0)
#Make linear regression model based on best model from other markdown sheet
library(SciViews)
model <- lm(ln(total_points) ~ scale(assists) + scale(bonus) + scale(bps) + scale(goals_scored) + scale(influence) + scale(threat) + scale(minutes) , data = NewFPL2021)
summary(model)
#Assumption Modeling
tresid1 <- rstudent(model)
par(mfrow = c(1,2))
qqnorm(tresid1, pch=20)
qqline(tresid1, col="blue")
hist(tresid1)
plot(model$fitted.values, tresid1, pch=20)
abline(h=0)
plot(tresid1, type="o", pch=20)
abline(h=0)
FPL_1920$scale_assists <- scale(FPL_1920$assists)
FPL_1920$scale_bonus <- scale(FPL_1920$bonus)
FPL_1920$scale_bps <- scale(FPL_1920$bps)
FPL_1920$scale_goals_scored <- scale(FPL_1920$goals_scored)
FPL_1920$scale_influence <- scale(FPL_1920$influence)
FPL_1920$scale_threat <- scale(FPL_1920$threat)
FPL_1920$scale_minutes <- scale(FPL_1920$minutes)
FPL_1920$ln_totalpoints <- ln(FPL_1920$total_points)
New1920 <- FPL_1920 %>% select(c(scale_assists, scale_bonus, scale_bps, scale_goals_scored, scale_influence, scale_threat, scale_minutes, ln_totalpoints, first_name, second_name))
#Rename columns in dataset
names(New1920)[names(New1920) == "ln_totalpoints"] <- "total_points"
names(New1920)[names(New1920) == "scale_assists"] <- "assists"
names(New1920)[names(New1920) == "scale_bonus"] <- "bonus"
names(New1920)[names(New1920) == "scale_bps"] <- "bps"
names(New1920)[names(New1920) == "scale_goals_scored"] <- "goals_scored"
names(New1920)[names(New1920) == "scale_influence"] <- "influence"
names(New1920)[names(New1920) == "scale_threat"] <- "threat"
names(New1920)[names(New1920) == "scale_minutes"] <- "minutes"
#Predict values for 2019-20 season
prediction1920 <- predict(model, newdata = New1920)
New1920$prediction <- round(prediction1920,2)
New1920$difference <- round((New1920$prediction - (New1920$total_points)),2)
#Look at distribution of difference values for 2019-20
ggplot(New1920, aes(x=difference)) +
geom_boxplot()
mean(New1920$difference)
FPL_2122 <- read.csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/FPLCurrentYearPredict.csv")
FPL_2122 <- FPL_2122 %>% select(-c(clean.sheets, saves.))
FPL_2122 <- FPL_2122 %>% filter(total.points > 0)
FPL_2122 <- FPL_2122 %>% filter(assists. > 0)
FPL_2122 <- FPL_2122 %>% filter(bonus. > 0)
FPL_2122 <- FPL_2122 %>% filter(bps. > 0)
FPL_2122 <- FPL_2122 %>% filter(goals.scored > 0)
FPL_2122 <- FPL_2122 %>% filter(influence. > 0)
FPL_2122 <- FPL_2122 %>% filter(threat. > 0)
FPL_2122 <- FPL_2122 %>% filter(minutes. > 0)
FPL_2122$scale_assists <- scale(FPL_2122$assists.)
FPL_2122$scale_bonus <- scale(FPL_2122$bonus.)
FPL_2122$scale_bps <- scale(FPL_2122$bps.)
FPL_2122$scale_goals_scored <- scale(FPL_2122$goals.scored)
FPL_2122$scale_influence <- scale(FPL_2122$influence.)
FPL_2122$scale_threat <- scale(FPL_2122$threat.)
FPL_2122$scale_minutes <- scale(FPL_2122$minutes.)
FPL_2122$ln_totalpoints <- ln(FPL_2122$total.points)
New2122 <- FPL_2122 %>% select(c(scale_assists, scale_bonus, scale_bps, scale_goals_scored, scale_influence, scale_threat, scale_minutes, ln_totalpoints, name))
names(New2122)[names(New2122) == "ln_totalpoints"] <- "total_points"
names(New2122)[names(New2122) == "scale_assists"] <- "assists"
names(New2122)[names(New2122) == "scale_bonus"] <- "bonus"
names(New2122)[names(New2122) == "scale_bps"] <- "bps"
names(New2122)[names(New2122) == "scale_goals_scored"] <- "goals_scored"
names(New2122)[names(New2122) == "scale_influence"] <- "influence"
names(New2122)[names(New2122) == "scale_threat"] <- "threat"
names(New2122)[names(New2122) == "scale_minutes"] <- "minutes"
prediction_2122 <- predict(model, newdata = New2122)
New2122$prediction <- round(prediction_2122,3)
New2122$difference <- round((New2122$prediction - New2122$total_points),3)
ggplot(New2122, aes(x=difference)) +
geom_boxplot()
mean(New2122$difference)
gw8 <- read.csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/2021-22/gw8.csv")
gw9 <- read.csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/2021-22/gw9.csv")
#gw10 <- read.csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/2021-22/gw10.csv")
#Just keep adding gameweeks to keep it going
#Make a function to quickly select only the columns we want from each dataset
gameweek_column_cleaner <- function(gameweek_variable) {
gameweek_variable %>% select(c(total_points,assists,bonus,bps,goals_scored,influence,minutes,threat,name))
}
#Put in gameweek
gw8 <- gameweek_column_cleaner(gw8)
gw9 <- gameweek_column_cleaner(gw9)
#gw10 <- gameweek_column_cleaner(gw10)
#Bring in Clean Dataset for 2021-22 Season
Base_GW <- read.csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/FPLCurrentYearPredict.csv")
Base_GW <- Base_GW %>% select(-c(clean.sheets, saves.))
#Rename columns in dataset
names(Base_GW)[names(Base_GW) == "total.points"] <- "total_points"
names(Base_GW)[names(Base_GW) == "assists."] <- "assists"
names(Base_GW)[names(Base_GW) == "bonus."] <- "bonus"
names(Base_GW)[names(Base_GW) == "bps."] <- "bps"
names(Base_GW)[names(Base_GW) == "goals.scored"] <- "goals_scored"
names(Base_GW)[names(Base_GW) == "influence."] <- "influence"
names(Base_GW)[names(Base_GW) == "threat."] <- "threat"
names(Base_GW)[names(Base_GW) == "minutes."] <- "minutes"
#Keep adding to make next projections
gw8_projections <- rbind(Base_GW, gw8)
gw9_projections <- rbind(gw8_projections, gw9)
#gw10_projections <- rbind(gw9_projections, gw10)
#Current Week's Projection Model
X = gw9_projections
#Take Out 0 values for natural log scaling
X <- X %>% filter(total_points > 0)
X <- X %>% filter(assists > 0)
X <- X %>% filter(bonus > 0)
X <- X %>% filter(bps > 0)
X <- X %>% filter(goals_scored > 0)
X <- X %>% filter(influence > 0)
X <- X %>% filter(threat > 0)
X <- X %>% filter(minutes > 0)
#Make new columns for scaled variables
X$scale_assists <- scale(X$assists)
X$scale_bonus <- scale(X$bonus)
X$scale_bps <- scale(X$bps)
X$scale_goals_scored <- scale(X$goals_scored)
X$scale_influence <- scale(X$influence)
X$scale_threat <- scale(X$threat)
X$scale_minutes <- scale(X$minutes)
X$ln_totalpoints <- ln(X$total_points)
#Only Take Scaled Variables for XX dataset
XX <- X %>% select(c(scale_assists, scale_bonus, scale_bps, scale_goals_scored, scale_influence, scale_threat, scale_minutes, ln_totalpoints, name))
#Rename Columns
names(XX)[names(XX) == "ln_totalpoints"] <- "total_points"
names(XX)[names(XX) == "scale_assists"] <- "assists"
names(XX)[names(XX) == "scale_bonus"] <- "bonus"
names(XX)[names(XX) == "scale_bps"] <- "bps"
names(XX)[names(XX) == "scale_goals_scored"] <- "goals_scored"
names(XX)[names(XX) == "scale_influence"] <- "influence"
names(XX)[names(XX) == "scale_threat"] <- "threat"
names(XX)[names(XX) == "scale_minutes"] <- "minutes"
#Model Predictions for Each Current Gameweek
live_predictions <- predict(model, newdata = XX)
XX$prediction <- round(live_predictions,3)
XX$difference <- round((XX$prediction - XX$total_points),3)
#Graph and Evaluate Each Weeks Performance
ggplot(XX, aes(x=difference)) +
geom_boxplot()
mean(X$difference)
View(New2122)
View(XX)
#Load in packages
library(dplyr)
library(tidyverse)
#Load in Beginning Data
FPL_1920 <- read.csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/2019-20/players_raw.csv")
FPL_2021 <- read.csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/2020-21/players_raw.csv")
NewFPL2021 <- read_csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/2020-21/players_raw.csv")
FPL_1920 <- FPL_1920 %>% filter(total_points > 0)
FPL_1920 <- FPL_1920 %>% filter(assists > 0)
FPL_1920 <- FPL_1920 %>% filter(bonus > 0)
FPL_1920 <- FPL_1920 %>% filter(bps > 0)
FPL_1920 <- FPL_1920 %>% filter(goals_scored > 0)
FPL_1920 <- FPL_1920 %>% filter(influence > 0)
FPL_1920 <- FPL_1920 %>% filter(threat > 0)
FPL_1920 <- FPL_1920 %>% filter(minutes > 0)
NewFPL2021 <- NewFPL2021 %>% filter(total_points > 0)
NewFPL2021 <- NewFPL2021 %>% filter(assists > 0)
NewFPL2021 <- NewFPL2021 %>% filter(bonus > 0)
NewFPL2021 <- NewFPL2021 %>% filter(bps > 0)
NewFPL2021 <- NewFPL2021 %>% filter(goals_scored > 0)
NewFPL2021 <- NewFPL2021 %>% filter(influence > 0)
NewFPL2021 <- NewFPL2021 %>% filter(threat > 0)
NewFPL2021 <- NewFPL2021 %>% filter(minutes > 0)
#Make linear regression model based on best model from other markdown sheet
library(SciViews)
model <- lm(ln(total_points) ~ scale(assists) + scale(bonus) + scale(bps) + scale(goals_scored) + scale(influence) + scale(threat) + scale(minutes) , data = NewFPL2021)
summary(model)
#Assumption Modeling
tresid1 <- rstudent(model)
par(mfrow = c(1,2))
qqnorm(tresid1, pch=20)
qqline(tresid1, col="blue")
hist(tresid1)
plot(model$fitted.values, tresid1, pch=20)
abline(h=0)
plot(tresid1, type="o", pch=20)
abline(h=0)
FPL_1920$scale_assists <- scale(FPL_1920$assists)
FPL_1920$scale_bonus <- scale(FPL_1920$bonus)
FPL_1920$scale_bps <- scale(FPL_1920$bps)
FPL_1920$scale_goals_scored <- scale(FPL_1920$goals_scored)
FPL_1920$scale_influence <- scale(FPL_1920$influence)
FPL_1920$scale_threat <- scale(FPL_1920$threat)
FPL_1920$scale_minutes <- scale(FPL_1920$minutes)
FPL_1920$ln_totalpoints <- ln(FPL_1920$total_points)
New1920 <- FPL_1920 %>% select(c(scale_assists, scale_bonus, scale_bps, scale_goals_scored, scale_influence, scale_threat, scale_minutes, ln_totalpoints, first_name, second_name))
#Rename columns in dataset
names(New1920)[names(New1920) == "ln_totalpoints"] <- "total_points"
names(New1920)[names(New1920) == "scale_assists"] <- "assists"
names(New1920)[names(New1920) == "scale_bonus"] <- "bonus"
names(New1920)[names(New1920) == "scale_bps"] <- "bps"
names(New1920)[names(New1920) == "scale_goals_scored"] <- "goals_scored"
names(New1920)[names(New1920) == "scale_influence"] <- "influence"
names(New1920)[names(New1920) == "scale_threat"] <- "threat"
names(New1920)[names(New1920) == "scale_minutes"] <- "minutes"
#Predict values for 2019-20 season
prediction1920 <- predict(model, newdata = New1920)
New1920$prediction <- round(prediction1920,2)
New1920$difference <- round((New1920$prediction - (New1920$total_points)),2)
#Look at distribution of difference values for 2019-20
ggplot(New1920, aes(x=difference)) +
geom_boxplot()
mean(New1920$difference)
FPL_2122 <- read.csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/FPLCurrentYearPredict.csv")
FPL_2122 <- FPL_2122 %>% select(-c(clean.sheets, saves.))
FPL_2122 <- FPL_2122 %>% filter(total.points > 0)
FPL_2122 <- FPL_2122 %>% filter(assists. > 0)
FPL_2122 <- FPL_2122 %>% filter(bonus. > 0)
FPL_2122 <- FPL_2122 %>% filter(bps. > 0)
FPL_2122 <- FPL_2122 %>% filter(goals.scored > 0)
FPL_2122 <- FPL_2122 %>% filter(influence. > 0)
FPL_2122 <- FPL_2122 %>% filter(threat. > 0)
FPL_2122 <- FPL_2122 %>% filter(minutes. > 0)
FPL_2122$scale_assists <- scale(FPL_2122$assists.)
FPL_2122$scale_bonus <- scale(FPL_2122$bonus.)
FPL_2122$scale_bps <- scale(FPL_2122$bps.)
FPL_2122$scale_goals_scored <- scale(FPL_2122$goals.scored)
FPL_2122$scale_influence <- scale(FPL_2122$influence.)
FPL_2122$scale_threat <- scale(FPL_2122$threat.)
FPL_2122$scale_minutes <- scale(FPL_2122$minutes.)
FPL_2122$ln_totalpoints <- ln(FPL_2122$total.points)
New2122 <- FPL_2122 %>% select(c(scale_assists, scale_bonus, scale_bps, scale_goals_scored, scale_influence, scale_threat, scale_minutes, ln_totalpoints, name))
names(New2122)[names(New2122) == "ln_totalpoints"] <- "total_points"
names(New2122)[names(New2122) == "scale_assists"] <- "assists"
names(New2122)[names(New2122) == "scale_bonus"] <- "bonus"
names(New2122)[names(New2122) == "scale_bps"] <- "bps"
names(New2122)[names(New2122) == "scale_goals_scored"] <- "goals_scored"
names(New2122)[names(New2122) == "scale_influence"] <- "influence"
names(New2122)[names(New2122) == "scale_threat"] <- "threat"
names(New2122)[names(New2122) == "scale_minutes"] <- "minutes"
prediction_2122 <- predict(model, newdata = New2122)
New2122$prediction <- round(prediction_2122,3)
New2122$difference <- round((New2122$prediction - New2122$total_points),3)
ggplot(New2122, aes(x=difference)) +
geom_boxplot()
mean(New2122$difference)
gw8 <- read.csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/2021-22/gw8.csv")
gw9 <- read.csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/2021-22/gw9.csv")
gw10 <- read.csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/2021-22/gw10.csv")
#Just keep adding gameweeks to keep it going
#Make a function to quickly select only the columns we want from each dataset
gameweek_column_cleaner <- function(gameweek_variable) {
gameweek_variable %>% select(c(total_points,assists,bonus,bps,goals_scored,influence,minutes,threat,name))
}
#Put in gameweek
gw8 <- gameweek_column_cleaner(gw8)
gw9 <- gameweek_column_cleaner(gw9)
gw10 <- gameweek_column_cleaner(gw10)
#Bring in Clean Dataset for 2021-22 Season
Base_GW <- read.csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/FPLCurrentYearPredict.csv")
Base_GW <- Base_GW %>% select(-c(clean.sheets, saves.))
#Rename columns in dataset
names(Base_GW)[names(Base_GW) == "total.points"] <- "total_points"
names(Base_GW)[names(Base_GW) == "assists."] <- "assists"
names(Base_GW)[names(Base_GW) == "bonus."] <- "bonus"
names(Base_GW)[names(Base_GW) == "bps."] <- "bps"
names(Base_GW)[names(Base_GW) == "goals.scored"] <- "goals_scored"
names(Base_GW)[names(Base_GW) == "influence."] <- "influence"
names(Base_GW)[names(Base_GW) == "threat."] <- "threat"
names(Base_GW)[names(Base_GW) == "minutes."] <- "minutes"
#Keep adding to make next projections
gw8_projections <- rbind(Base_GW, gw8)
gw9_projections <- rbind(gw8_projections, gw9)
gw10_projections <- rbind(gw9_projections, gw10)
#Current Week's Projection Model
X = gw10_projections
#Take Out 0 values for natural log scaling
X <- X %>% filter(total_points > 0)
X <- X %>% filter(assists > 0)
X <- X %>% filter(bonus > 0)
X <- X %>% filter(bps > 0)
X <- X %>% filter(goals_scored > 0)
X <- X %>% filter(influence > 0)
X <- X %>% filter(threat > 0)
X <- X %>% filter(minutes > 0)
#Make new columns for scaled variables
X$scale_assists <- scale(X$assists)
X$scale_bonus <- scale(X$bonus)
X$scale_bps <- scale(X$bps)
X$scale_goals_scored <- scale(X$goals_scored)
X$scale_influence <- scale(X$influence)
X$scale_threat <- scale(X$threat)
X$scale_minutes <- scale(X$minutes)
X$ln_totalpoints <- ln(X$total_points)
#Only Take Scaled Variables for XX dataset
XX <- X %>% select(c(scale_assists, scale_bonus, scale_bps, scale_goals_scored, scale_influence, scale_threat, scale_minutes, ln_totalpoints, name))
#Rename Columns
names(XX)[names(XX) == "ln_totalpoints"] <- "total_points"
names(XX)[names(XX) == "scale_assists"] <- "assists"
names(XX)[names(XX) == "scale_bonus"] <- "bonus"
names(XX)[names(XX) == "scale_bps"] <- "bps"
names(XX)[names(XX) == "scale_goals_scored"] <- "goals_scored"
names(XX)[names(XX) == "scale_influence"] <- "influence"
names(XX)[names(XX) == "scale_threat"] <- "threat"
names(XX)[names(XX) == "scale_minutes"] <- "minutes"
#Model Predictions for Each Current Gameweek
live_predictions <- predict(model, newdata = XX)
XX$prediction <- round(live_predictions,3)
XX$difference <- round((XX$prediction - XX$total_points),3)
#Graph and Evaluate Each Weeks Performance
ggplot(XX, aes(x=difference)) +
geom_boxplot()
mean(X$difference)
View(XX)
View(New2122)
