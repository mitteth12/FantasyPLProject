#install.packages("leaps")
library(tidyverse)
library(caret)
library(leaps)
#Get Visual of 2020-21 Season Data
sample_n(FPL2021_Data, 5)
#Make Multi Linear Regression Model Based on Variables
MLR2021_model <- lm(total_points~., data = FPL2021_Data)
summary(MLR2021_model)
#Make new dataframe without points per game and run model again
FPL2021_minusppg <- FPL2021_Data %>% select(-points_per_game)
MLR2021_revmodel <- lm(total_points~., data = FPL2021_minusppg)
summary(MLR2021_revmodel)
#Finding Best Model Using Best Subset Method
model_2021 <- regsubsets(total_points~., data = FPL2021_minusppg, nvmax=16)
summary(model_2021)
#See which model works best for adj r^2, cp, and bic
res.sum <- summary(model_2021)
data.frame(
Adj.R2 = which.max(res.sum$adjr2),
CP = which.min(res.sum$cp),
BIC = which.min(res.sum$bic)
)
#k-folds formula taken from above source
# id: model id
# object: regsubsets object
# data: data used to fit regsubsets
# outcome: outcome variable
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object)$which[id,-1]
# Get outcome variable
#form <- as.formula(object$call[[2]])
#outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
#Function to get the cross validation error for a model
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 14)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
# Compute cross-validation error
model.ids <- 1:14
cv.errors <-  map(model.ids, get_model_formula, model_2021, "total_points") %>%
map(get_cv_error, data = FPL2021_minusppg) %>%
unlist()
example_model <- lm(total_points ~ 1/assists + 1/bonus + 1/bps + 1/clean_sheets + 1/goals_scored + 1/influence + 1/minutes + 1/saves + 1/threat, data=NewFPL2021)
NewFPL2021 <- read_csv("~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/2020-21/players_raw.csv")
example_model <- lm(total_points ~ 1/assists + 1/bonus + 1/bps + 1/clean_sheets + 1/goals_scored + 1/influence + 1/minutes + 1/saves + 1/threat, data=NewFPL2021)
tresid3 <- rstudent(example_model)
par(mfrow = c(1,2))
qqnorm(tresid3, pch=20)
qqline(tresid3, col="blue")
hist(tresid3)
plot(example_model$fitted.values, tresid3, pch=20)
abline(h=0)
plot(tresid3, type="o", pch=20)
abline(h=0)
example_model <- lm(1/total_points ~ 1/assists + 1/bonus + 1/bps + 1/clean_sheets + 1/goals_scored + 1/influence + 1/minutes + 1/saves + 1/threat, data=NewFPL2021)
best2021_model <- lm(total_points~assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=FPL2021_minusppg)
wt <- 1 / lm(abs(best2021_model$residuals) ~ best2021_model$fitted.values)$fitted.values^2
example_model <- lm(total_points ~ assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=NewFPL2021, weights=wt)
example_model <- lm(total_points ~ assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=FPL2021_minusppg, weights=wt)
example_model <- lm(total_points ~ assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=FPL2021_minusppg)
example_model <- lm(total_points ~ assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=FPL2021_minusppg, weights = wt)
best2021_model <- lm(total_points~assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=FPL2021_minusppg)
example_model <- lm(total_points ~ assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=FPL2021_minusppg, weights = wt)
example_model <- lm(total_points ~ assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=FPL2021_minusppg, weights = wt)
example_model <- lm(total_points ~ assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=FPL2021_minusppg, weights = wt)
example_model <- lm(total_points ~ assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=FPL2021_minusppg, weights = wt)
example_model <- lm(total_points ~ assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=FPL2021_minusppg, weights = wt)
example_model <- lm(total_points ~ assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=FPL2021_minusppg, weights = wt)
example_model <- lm(total_points ~ assists + bonus + bps + clean_sheets + goals_scored + influence + minutes + saves + threat, data=FPL2021_minusppg, weights = wt)
#Load in packages
library(dplyr)
library(tidyverse)
#Load in Beginning Data
FPL_1920 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2019-20/players_raw.csv")
FPL_2021 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2020-21/players_raw.csv")
NewFPL2021 <- read_csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2020-21/players_raw.csv")
FPL_1920 <- FPL_1920 %>% filter(total_points > 0)
FPL_1920 <- FPL_1920 %>% filter(assists > 0)
FPL_1920 <- FPL_1920 %>% filter(bonus > 0)
FPL_1920 <- FPL_1920 %>% filter(bps > 0)
FPL_1920 <- FPL_1920 %>% filter(goals_scored > 0)
FPL_1920 <- FPL_1920 %>% filter(influence > 0)
FPL_1920 <- FPL_1920 %>% filter(threat > 0)
FPL_1920 <- FPL_1920 %>% filter(minutes > 0)
NewFPL2021 <- NewFPL2021 %>% filter(total_points > 0)
#NewFPL2021 <- NewFPL2021 %>% filter(assists > 0)
#NewFPL2021 <- NewFPL2021 %>% filter(bonus > 0)
#NewFPL2021 <- NewFPL2021 %>% filter(bps > 0)
#NewFPL2021 <- NewFPL2021 %>% filter(goals_scored > 0)
#NewFPL2021 <- NewFPL2021 %>% filter(influence > 0)
#NewFPL2021 <- NewFPL2021 %>% filter(threat > 0)
#NewFPL2021 <- NewFPL2021 %>% filter(minutes > 0)
#Make linear regression model based on best model from other markdown sheet
library(SciViews)
example_model1 <- lm(total_points ~ assists + bonus + bps + goals_scored + influence + minutes + threat, data=NewFPL2021)
wts <- 1/fitted(lm(abs(residuals(example_model1)) ~ fitted(example_model1)))^2
model <- lm(total_points ~ assists + bonus + bps + goals_scored + influence + minutes+ threat, data=NewFPL2021, weights = wts)
summary(model)
#Load in packages
library(dplyr)
library(tidyverse)
#Load in Beginning Data
FPL_1920 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2019-20/players_raw.csv")
FPL_2021 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2020-21/players_raw.csv")
NewFPL2021 <- read_csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2020-21/players_raw.csv")
#Load in packages
library(dplyr)
library(tidyverse)
#Load in Beginning Data
FPL_1920 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2019-20/players_raw.csv")
FPL_2021 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2020-21/players_raw.csv")
NewFPL2021 <- read_csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2020-21/players_raw.csv")
FPL_1920 <- FPL_1920 %>% filter(total_points > 0)
FPL_1920 <- FPL_1920 %>% filter(assists > 0)
FPL_1920 <- FPL_1920 %>% filter(bonus > 0)
FPL_1920 <- FPL_1920 %>% filter(bps > 0)
FPL_1920 <- FPL_1920 %>% filter(goals_scored > 0)
FPL_1920 <- FPL_1920 %>% filter(influence > 0)
FPL_1920 <- FPL_1920 %>% filter(threat > 0)
FPL_1920 <- FPL_1920 %>% filter(minutes > 0)
NewFPL2021 <- NewFPL2021 %>% filter(total_points > 0)
#NewFPL2021 <- NewFPL2021 %>% filter(assists > 0)
#NewFPL2021 <- NewFPL2021 %>% filter(bonus > 0)
#NewFPL2021 <- NewFPL2021 %>% filter(bps > 0)
#NewFPL2021 <- NewFPL2021 %>% filter(goals_scored > 0)
#NewFPL2021 <- NewFPL2021 %>% filter(influence > 0)
#NewFPL2021 <- NewFPL2021 %>% filter(threat > 0)
#NewFPL2021 <- NewFPL2021 %>% filter(minutes > 0)
#Make linear regression model based on best model from other markdown sheet
library(SciViews)
example_model1 <- lm(total_points ~ assists + bonus + bps + goals_scored + influence + minutes + threat, data=NewFPL2021)
wts <- 1/fitted(lm(abs(residuals(example_model1)) ~ fitted(example_model1)))^2
model <- lm(total_points ~ assists + bonus + bps + goals_scored + influence + minutes+ threat, data=NewFPL2021, weights = wts)
summary(model)
#Make linear regression model for non-scaled data
model1 <- lm(total_points ~ assists + bonus + bps + goals_scored + influence + threat + minutes, data = NewFPL2021)
#Assumption Modeling
tresid1 <- rstudent(model)
par(mfrow = c(1,2))
qqnorm(tresid1, pch=20)
qqline(tresid1, col="blue")
hist(tresid1)
plot(model$fitted.values, tresid1, pch=20)
abline(h=0)
plot(tresid1, type="o", pch=20)
abline(h=0)
FPL_1920$scale_assists <- scale(FPL_1920$assists)
FPL_1920$scale_bonus <- scale(FPL_1920$bonus)
FPL_1920$scale_bps <- scale(FPL_1920$bps)
FPL_1920$scale_goals_scored <- scale(FPL_1920$goals_scored)
FPL_1920$scale_influence <- scale(FPL_1920$influence)
FPL_1920$scale_threat <- scale(FPL_1920$threat)
FPL_1920$scale_minutes <- scale(FPL_1920$minutes)
FPL_1920$ln_totalpoints <- ln(FPL_1920$total_points)
New1920 <- FPL_1920 %>% select(c(scale_assists, scale_bonus, scale_bps, scale_goals_scored, scale_influence, scale_threat, scale_minutes, ln_totalpoints, first_name, second_name))
#Rename columns in dataset
names(New1920)[names(New1920) == "ln_totalpoints"] <- "total_points"
names(New1920)[names(New1920) == "scale_assists"] <- "assists"
names(New1920)[names(New1920) == "scale_bonus"] <- "bonus"
names(New1920)[names(New1920) == "scale_bps"] <- "bps"
names(New1920)[names(New1920) == "scale_goals_scored"] <- "goals_scored"
names(New1920)[names(New1920) == "scale_influence"] <- "influence"
names(New1920)[names(New1920) == "scale_threat"] <- "threat"
names(New1920)[names(New1920) == "scale_minutes"] <- "minutes"
#Predict values for 2019-20 season
#prediction1920 <- predict(model, newdata = New1920)
#New1920$prediction <- round(prediction1920,2)
#New1920$difference <- round((New1920$prediction - (New1920$total_points)),2)
#Look at distribution of difference values for 2019-20
#ggplot(New1920, aes(x=difference)) +
#geom_boxplot()
#mean(New1920$difference)
FPL_2122 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/FPLCurrentYearPredict.csv")
FPL_2122 <- FPL_2122 %>% select(-c(clean.sheets, saves.))
FPL_2122 <- FPL_2122 %>% filter(total.points > 0)
FPL_2122 <- FPL_2122 %>% filter(assists. > 0)
FPL_2122 <- FPL_2122 %>% filter(bonus. > 0)
FPL_2122 <- FPL_2122 %>% filter(bps. > 0)
FPL_2122 <- FPL_2122 %>% filter(goals.scored > 0)
FPL_2122 <- FPL_2122 %>% filter(influence. > 0)
FPL_2122 <- FPL_2122 %>% filter(threat. > 0)
FPL_2122 <- FPL_2122 %>% filter(minutes. > 0)
FPL_2122$scale_assists <- scale(FPL_2122$assists.)
FPL_2122$scale_bonus <- scale(FPL_2122$bonus.)
FPL_2122$scale_bps <- scale(FPL_2122$bps.)
FPL_2122$scale_goals_scored <- scale(FPL_2122$goals.scored)
FPL_2122$scale_influence <- scale(FPL_2122$influence.)
FPL_2122$scale_threat <- scale(FPL_2122$threat.)
FPL_2122$scale_minutes <- scale(FPL_2122$minutes.)
FPL_2122$ln_totalpoints <- ln(FPL_2122$total.points)
New2122 <- FPL_2122 %>% select(c(scale_assists, scale_bonus, scale_bps, scale_goals_scored, scale_influence, scale_threat, scale_minutes, ln_totalpoints, name))
names(New2122)[names(New2122) == "ln_totalpoints"] <- "total_points"
names(New2122)[names(New2122) == "scale_assists"] <- "assists"
names(New2122)[names(New2122) == "scale_bonus"] <- "bonus"
names(New2122)[names(New2122) == "scale_bps"] <- "bps"
names(New2122)[names(New2122) == "scale_goals_scored"] <- "goals_scored"
names(New2122)[names(New2122) == "scale_influence"] <- "influence"
names(New2122)[names(New2122) == "scale_threat"] <- "threat"
names(New2122)[names(New2122) == "scale_minutes"] <- "minutes"
#prediction_2122 <- predict(model, newdata = New2122)
#New2122$prediction <- round(prediction_2122,3)
#New2122$difference <- round((New2122$prediction - New2122$total_points),3)
#ggplot(New2122, aes(x=difference)) +
#geom_boxplot()
#mean(New2122$difference)
#Insert in New Gameweeks
gw8 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw8.csv")
gw9 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw9.csv")
gw10 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw10.csv")
gw11 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw11.csv")
gw12 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw12.csv")
gw13 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw13.csv")
gw14 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw14.csv")
gw15 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw15.csv")
gw16 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw16.csv")
gw17 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw17.csv")
gw18 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw18.csv")
gw19 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw19.csv")
gw20 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw20.csv")
gw21 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw21.csv")
gw22 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw22.csv")
gw23 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw23.csv")
gw24 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw24.csv")
gw25 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw25.csv")
gw26 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw26.csv")
gw27 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw27.csv")
gw28 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw28.csv")
gw29 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw29.csv")
gw30 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw30.csv")
gw31 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw31.csv")
gw32 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw32.csv")
gw33 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw33.csv")
gw34 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw34.csv")
gw35 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw35.csv")
gw36 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw36.csv")
gw38 <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/gw38.csv")
#Just keep adding gameweeks to keep it going
#Make a function to quickly select only the columns we want from each dataset
gameweek_column_cleaner <- function(gameweek_variable) {
gameweek_variable %>% select(c(total_points,assists,bonus,bps,goals_scored,influence,minutes,threat,name))
}
#Put in gameweek
gw8 <- gameweek_column_cleaner(gw8)
gw9 <- gameweek_column_cleaner(gw9)
gw10 <- gameweek_column_cleaner(gw10)
gw11 <- gameweek_column_cleaner(gw11)
gw12 <- gameweek_column_cleaner(gw12)
gw13 <- gameweek_column_cleaner(gw13)
gw14 <- gameweek_column_cleaner(gw14)
gw15 <- gameweek_column_cleaner(gw15)
gw16 <- gameweek_column_cleaner(gw16)
gw17 <- gameweek_column_cleaner(gw17)
gw18 <- gameweek_column_cleaner(gw18)
gw19 <- gameweek_column_cleaner(gw19)
gw20 <- gameweek_column_cleaner(gw20)
gw21 <- gameweek_column_cleaner(gw21)
gw22 <- gameweek_column_cleaner(gw22)
gw23 <- gameweek_column_cleaner(gw23)
gw24 <- gameweek_column_cleaner(gw24)
gw25 <- gameweek_column_cleaner(gw25)
gw26 <- gameweek_column_cleaner(gw26)
gw27 <- gameweek_column_cleaner(gw27)
gw28 <- gameweek_column_cleaner(gw28)
gw29 <- gameweek_column_cleaner(gw29)
gw30 <- gameweek_column_cleaner(gw30)
gw31 <- gameweek_column_cleaner(gw31)
gw32 <- gameweek_column_cleaner(gw32)
gw33 <- gameweek_column_cleaner(gw33)
gw34 <- gameweek_column_cleaner(gw34)
gw35 <- gameweek_column_cleaner(gw35)
gw36 <- gameweek_column_cleaner(gw36)
gw38 <- gameweek_column_cleaner(gw38)
#Bring in Clean Dataset for 2021-22 Season
Base_GW <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/FPLCurrentYearPredict.csv")
Base_GW <- Base_GW %>% select(-c(clean.sheets, saves.))
#Rename columns in dataset
names(Base_GW)[names(Base_GW) == "total.points"] <- "total_points"
names(Base_GW)[names(Base_GW) == "assists."] <- "assists"
names(Base_GW)[names(Base_GW) == "bonus."] <- "bonus"
names(Base_GW)[names(Base_GW) == "bps."] <- "bps"
names(Base_GW)[names(Base_GW) == "goals.scored"] <- "goals_scored"
names(Base_GW)[names(Base_GW) == "influence."] <- "influence"
names(Base_GW)[names(Base_GW) == "threat."] <- "threat"
names(Base_GW)[names(Base_GW) == "minutes."] <- "minutes"
#Keep adding to make next projections
gw8_projections <- rbind(Base_GW, gw8)
gw9_projections <- rbind(gw8_projections, gw9)
gw10_projections <- rbind(gw9_projections, gw10)
gw11_projections <- rbind(gw10_projections, gw11)
gw12_projections <- rbind(gw11_projections, gw12)
gw13_projections <- rbind(gw12_projections, gw13)
gw14_projections <- rbind(gw13_projections, gw14)
gw15_projections <- rbind(gw14_projections, gw15)
gw16_projections <- rbind(gw15_projections, gw16)
gw17_projections <- rbind(gw16_projections, gw17)
gw18_projections <- rbind(gw17_projections, gw18)
gw19_projections <- rbind(gw18_projections, gw19)
gw20_projections <- rbind(gw19_projections, gw20)
gw21_projections <- rbind(gw20_projections, gw21)
gw22_projections <- rbind(gw21_projections, gw22)
gw23_projections <- rbind(gw22_projections, gw23)
gw24_projections <- rbind(gw23_projections, gw24)
gw25_projections <- rbind(gw24_projections, gw25)
gw26_projections <- rbind(gw25_projections, gw26)
gw27_projections <- rbind(gw26_projections, gw27)
gw28_projections <- rbind(gw27_projections, gw28)
gw29_projections <- rbind(gw28_projections, gw29)
gw30_projections <- rbind(gw29_projections, gw30)
gw31_projections <- rbind(gw30_projections, gw31)
gw32_projections <- rbind(gw31_projections, gw32)
gw33_projections <- rbind(gw32_projections, gw33)
gw34_projections <- rbind(gw33_projections, gw34)
gw35_projections <- rbind(gw34_projections, gw35)
gw36_projections <- rbind(gw35_projections, gw36)
gw38_projections <- rbind(gw36_projections, gw38)
#Last Week's Project Model
X = gw36_projections
#Current Week's Projection Model
XX = gw38_projections
#Export X for Visualizations Purposes (Only Use For Updating Spreasdsheet/Do Only Once Every Two Months)
#Once Spreadsheet is Written Make a Column for Amount of Gameweeks in Team so Size Can be Used in Tableau
#write.csv(X,"~/Desktop/Data Analytics/Fantasy PL Project/FantasyPL_Data/2021-22/FPL21_22LiveStats.csv", row.names = FALSE)
#Accumulated Total for Columns
XX <- XX %>%
group_by(name) %>%
summarise_each(list(sum))
X <- X %>%
group_by(name) %>%
summarise_each(list(sum))
#Take Out 0 values for natural log scaling
XX <- XX %>% filter(total_points > 0)
X <- X %>% filter(total_points > 0)
#XX <- XX %>% filter(assists > 0)
#XX <- XX %>% filter(bonus > 0)
#XX <- XX %>% filter(bps > 0)
#XX <- XX %>% filter(goals_scored > 0)
#XX <- XX %>% filter(influence > 0)
#XX <- XX %>% filter(threat > 0)
#XX <- XX %>% filter(minutes > 0)
#Make new columns for scaled variables
#XX$assists <- scale(XX$assists)
#XX$bonus <- scale(XX$bonus)
#XX$bps <- scale(XX$bps)
#XX$goals_scored <- scale(XX$goals_scored)
#XX$influence <- scale(XX$influence)
#XX$threat <- scale(XX$threat)
#XX$minutes <- scale(XX$minutes)
#XX$total_points <- ln(XX$total_points)
#Model Predictions for Each Current Gameweek
live_predictions <- predict(model, newdata = XX)
XX$prediction <- round(live_predictions,3)
XX$difference <- round((XX$prediction - XX$total_points),3)
live_predictions1 <- predict(model, newdata = X)
X$prediction <- round(live_predictions1,3)
X$difference <- round((X$prediction - X$total_points),3)
#Graph and Evaluate Each Weeks Performance
ggplot(XX, aes(x=difference)) +
geom_boxplot()
median(XX$difference)
#Keep Only the Most Current Observation for Each Player
XX <- XX %>% distinct(name, .keep_all=TRUE)
X <- X %>% distinct(name, .keep_all =TRUE)
#Take out duplicate name of Ben Davies (Sorry Both Ben Davies)
XX <- subset(XX, name != "Ben Davies")
X <- subset(X, name != "Ben Davies")
#https://stackoverflow.com/questions/26423493/r-rank-largest-to-smallest
XX$Rank <- round(rank(-XX$prediction),0)
X$Rank <- round(rank(-X$prediction),0)
XX$actual_rank <- round(rank(-XX$total_points),0)
#New Dataset to Subtract Ranks From Gameweeks
#This Join Means That Players That Are New Will Not Be Added to Dataset Until After They Play in Two Gameweeks
XXX <- inner_join(XX,X, by="name")
XXX <- XXX %>% select(c(name,total_points.x,assists.x,bonus.x,bps.x,goals_scored.x,influence.x,minutes.x,threat.x,prediction.x,difference.x,actual_rank,Rank.x,Rank.y))
#Subtract Ranks
#GW_Change is difference in PREDICTED ranks from gameweek to gameweek
XXX$GW_Change <- XXX$Rank.y - XXX$Rank.x
#Final Clean Dataset to Look At
Final_Data <- XXX %>% select(-c(Rank.y))
names(Final_Data)[names(Final_Data) == "total_points.x"] <- "total_points"
names(Final_Data)[names(Final_Data) == "assists.x"] <- "assists"
names(Final_Data)[names(Final_Data) == "bonus.x"] <- "bonus"
names(Final_Data)[names(Final_Data) == "bps.x"] <- "bps"
names(Final_Data)[names(Final_Data) == "goals_scored.x"] <- "goals_scored"
names(Final_Data)[names(Final_Data) == "influence.x"] <- "influence"
names(Final_Data)[names(Final_Data) == "threat.x"] <- "threat"
names(Final_Data)[names(Final_Data) == "minutes.x"] <- "minutes"
names(Final_Data)[names(Final_Data) == "prediction.x"] <- "prediction"
names(Final_Data)[names(Final_Data) == "difference.x"] <- "difference"
names(Final_Data)[names(Final_Data) == "Rank.x"] <- "predicted_rank"
names(Final_Data)[names(Final_Data) == "GW_Change"] <- "predicted_gw_change"
Final_Data$total_contributions <- Final_Data$assists + Final_Data$goals_scored
#Load in some player data
player_info <- read.csv("~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/2021-22/fplplayer_info.csv")
#Join in player info data
Final_Data <- left_join(Final_Data,player_info, by="name")
Final_Data <- Final_Data %>% select(c(name,pos,squad,actual_rank,predicted_rank,predicted_gw_change,total_points,prediction,difference,assists,bonus,bps,goals_scored,influence,minutes,threat,total_contributions,caps_for_fpl))
#rank_difference is difference in actual rank vs. predicted rank for current gameweek
Final_Data$rank_difference <- Final_Data$actual_rank - Final_Data$predicted_rank
#Quickly Reorganize Final Data Spreadsheet One More Time
Final_Data <- Final_Data %>% select(c(name,pos,squad,actual_rank,predicted_rank,rank_difference,predicted_gw_change,total_points,prediction,difference,assists,bonus,bps,goals_scored,influence,minutes,threat,total_contributions,caps_for_fpl))
#Export Spreadsheet of Each Current Weeks New Predictions and Ranks (CHANGE EACH GAMEWEEK)
write.csv(Final_Data, "~/Desktop/Data Analytics/Archived Projects/Fantasy PL Project/FantasyPL_Data/Ranks_and_Predictions_21-22/GW23_Update.csv")
median_pos <- Final_Data %>% group_by(pos) %>% filter(pos != 'NA') %>% summarize(median(difference))
totalpoints_squads <- Final_Data %>% group_by(squad) %>% filter(squad != 'NA') %>% summarize(mean(total_points))
totalpoints_squads_pos <- Final_Data %>% group_by(squad,pos) %>% filter(squad != 'NA') %>% summarize(mean(total_points))
Final_MF <- Final_Data %>% filter(pos == 'MF')
Final_DF <- Final_Data %>% filter(pos == 'DF')
Final_FW <- Final_Data %>% filter(pos == 'FW')
#Latest five projections; for each gameweek add and delete a gameweek
gw33_projectionsA <- rbind(gw33)
gw34_projectionsA <- rbind(gw33_projectionsA,gw34)
gw35_projectionsA <- rbind(gw34_projectionsA,gw35)
gw36_projectionsA <- rbind(gw35_projectionsA,gw36)
gw38_projectionsA <- rbind(gw36_projectionsA,gw38)
#Last Week's Project Model
Y = gw36_projectionsA
#Current Week's Projection Model
YY = gw38_projectionsA
#Accumulated Total for Columns
YY <- YY %>%
group_by(name) %>%
summarise_each(list(sum))
Y <- Y %>%
group_by(name) %>%
summarise_each(list(sum))
#Take Out 0 values for natural log scaling
YY <- YY %>% filter(total_points > 0)
Y <- Y %>% filter(total_points > 0)
#XX <- XX %>% filter(assists > 0)
#XX <- XX %>% filter(bonus > 0)
#XX <- XX %>% filter(bps > 0)
#XX <- XX %>% filter(goals_scored > 0)
#XX <- XX %>% filter(influence > 0)
#XX <- XX %>% filter(threat > 0)
#XX <- XX %>% filter(minutes > 0)
#Make new columns for scaled variables
#XX$assists <- scale(XX$assists)
#XX$bonus <- scale(XX$bonus)
#XX$bps <- scale(XX$bps)
#XX$goals_scored <- scale(XX$goals_scored)
#XX$influence <- scale(XX$influence)
#XX$threat <- scale(XX$threat)
#XX$minutes <- scale(XX$minutes)
#XX$total_points <- ln(XX$total_points)
#Model Predictions for Each Current Gameweek
live_predictionsA <- predict(model, newdata = YY)
YY$prediction <- round(live_predictionsA,3)
YY$difference <- round((YY$prediction - YY$total_points),3)
live_predictions1A <- predict(model, newdata = Y)
Y$prediction <- round(live_predictions1A,3)
Y$difference <- round((Y$prediction - Y$total_points),3)
#Graph and Evaluate Each Weeks Performance
ggplot(YY, aes(x=difference)) +
geom_boxplot()
median(YY$difference)
#Keep Only the Most Current Observation for Each Player
YY <- YY %>% distinct(name, .keep_all=TRUE)
Y <- Y %>% distinct(name, .keep_all =TRUE)
#Take out duplicate name of Ben Davies (Sorry Both Ben Davies)
YY <- subset(YY, name != "Ben Davies")
Y <- subset(Y, name != "Ben Davies")
#https://stackoverflow.com/questions/26423493/r-rank-largest-to-smallest
YY$Rank <- round(rank(-YY$prediction),0)
Y$Rank <- round(rank(-Y$prediction),0)
YY$actual_rank <- round(rank(-YY$total_points),0)
#New Dataset to Subtract Ranks From Gameweeks
#This Join Means That Players That Are New Will Not Be Added to Dataset Until After They Play in Two Gameweeks
YYY <- inner_join(YY,Y, by="name")
YYY <- YYY %>% select(c(name,total_points.x,assists.x,bonus.x,bps.x,goals_scored.x,influence.x,minutes.x,threat.x,prediction.x,difference.x,actual_rank,Rank.x,Rank.y))
#Subtract Ranks
#GW_Change is difference in PREDICTED ranks from gameweek to gameweek
YYY$GW_Change <- YYY$Rank.y - YYY$Rank.x
#Final Clean Dataset to Look At
Final_Data_Form <- YYY %>% select(-c(Rank.y))
names(Final_Data_Form)[names(Final_Data_Form) == "total_points.x"] <- "total_points"
names(Final_Data_Form)[names(Final_Data_Form) == "assists.x"] <- "assists"
names(Final_Data_Form)[names(Final_Data_Form) == "bonus.x"] <- "bonus"
names(Final_Data_Form)[names(Final_Data_Form) == "bps.x"] <- "bps"
names(Final_Data_Form)[names(Final_Data_Form) == "goals_scored.x"] <- "goals_scored"
names(Final_Data_Form)[names(Final_Data_Form) == "influence.x"] <- "influence"
names(Final_Data_Form)[names(Final_Data_Form) == "threat.x"] <- "threat"
names(Final_Data_Form)[names(Final_Data_Form) == "minutes.x"] <- "minutes"
names(Final_Data_Form)[names(Final_Data_Form) == "prediction.x"] <- "prediction"
names(Final_Data_Form)[names(Final_Data_Form) == "difference.x"] <- "difference"
names(Final_Data_Form)[names(Final_Data_Form) == "Rank.x"] <- "predicted_rank"
names(Final_Data_Form)[names(Final_Data_Form) == "GW_Change"] <- "predicted_gw_change"
Final_Data_Form$total_contributions <- Final_Data_Form$assists + Final_Data_Form$goals_scored
#Join in player info data
Final_Data_Form <- left_join(Final_Data_Form,player_info, by="name")
Final_Data_Form <- Final_Data_Form %>% select(c(name,pos,squad,actual_rank,predicted_rank,predicted_gw_change,total_points,prediction,difference,assists,bonus,bps,goals_scored,influence,minutes,threat,total_contributions,caps_for_fpl))
#rank_difference is difference in actual rank vs. predicted rank for current gameweek
Final_Data_Form$rank_difference <- Final_Data_Form$actual_rank - Final_Data_Form$predicted_rank
#Quickly Reorganize Final Data Spreadsheet One More Time
Final_Data_Form <- Final_Data_Form %>% select(c(name,pos,squad,actual_rank,predicted_rank,rank_difference,predicted_gw_change,total_points,prediction,difference,assists,bonus,bps,goals_scored,influence,minutes,threat,total_contributions,caps_for_fpl))
season_ending_model <- lm(actual_rank ~ assists + bonus + bps + goals_scored + influence + threat + minutes, data = Final_Data)
summary(season_ending_model)
View(Final_Data)
View(Final_Data_Form)
View(Final_DF)
View(Final_FW)
View(Final_MF)
